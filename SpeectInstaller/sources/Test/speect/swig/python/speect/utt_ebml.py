# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""Speect Plug-in for SEbmlUttFile class"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_utt_ebml', [dirname(__file__)])
        except ImportError:
            import _utt_ebml
            return _utt_ebml
        if fp is not None:
            try:
                _mod = imp.load_module('_utt_ebml', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _utt_ebml = swig_import_helper()
    del swig_import_helper
else:
    import _utt_ebml
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



__version__ = "1.0.0"
__license__= "mit"

import speect

def _save_utterance_ebml(utt, path):
    """_save_utterance_ebml(SUtterance utt, char const * path)"""
    return _utt_ebml._save_utterance_ebml(utt, path)

def _load_utterance_ebml(path):
    """_load_utterance_ebml(char const * path) -> SUtterance"""
    return _utt_ebml._load_utterance_ebml(path)

from . import speect

def load_utt_ebml(path):
    """
    load_ebml(path)

    Load an utterance from a file in the EBML format.

    :param path: Full path and file name of the file where the utterance
                 should be loaded from.
    :type path: string
    :rtype: ``SUtterance``
    :note: All the features in the utterance (including in the relations and items) must
           have appropriate EBML format serialization formatters registered.
    """
    if not isinstance(path, str):
        raise TypeError("Argument \"path\" must be a string")

    return _load_utterance_ebml(path)


def save_utt_ebml(self, path):
    """
    save_ebml(path)

    Save the utterance to a file in the EBML format.

    :param path: Full path and file name of the file where the utterance
                 should be saved to.
    :type path: string
    :note: All the features in the utterance (including in the relations and items) must
           have appropriate EBML format serialization formatters registered.
    """
    if not isinstance(path, str):
        raise TypeError("Argument \"path\" must be a string")

    return _save_utterance_ebml(self, path)


# add the functions to the Speect SUtterance class
setattr(speect.SUtterance, "load_ebml", staticmethod(load_utt_ebml))
setattr(speect.SUtterance, "save_ebml", save_utt_ebml)

# This file is compatible with both classic and new-style classes.


