# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""Speect Plug-in for SUttProcessorCB class"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_uttproc_cb', [dirname(__file__)])
        except ImportError:
            import _uttproc_cb
            return _uttproc_cb
        if fp is not None:
            try:
                _mod = imp.load_module('_uttproc_cb', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _uttproc_cb = swig_import_helper()
    del swig_import_helper
else:
    import _uttproc_cb
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



__version__ = "1.0.0"
__license__= "mit"

import speect

def execute_python_callback(utt, sfunction):
    """execute_python_callback(SUtterance utt, void * sfunction)"""
    return _uttproc_cb.execute_python_callback(utt, sfunction)

def suttproc_cb_decrement_func(uttProcPy):
    """suttproc_cb_decrement_func(SUttProcessorCB * uttProcPy)"""
    return _uttproc_cb.suttproc_cb_decrement_func(uttProcPy)

def _s_uttproc_cb_new(callback_func):
    """_s_uttproc_cb_new(PyObject * callback_func) -> SUttProcessor"""
    return _uttproc_cb._s_uttproc_cb_new(callback_func)

from . import speect

def callback(callback_function):
    """
    callback(callback_function)

    Create a new utterance processor that has a Python function as a callback. When
    this newly created feature processor's ``run`` method is called, the Python
    function will be called with the arguments as supplied to the utterance processor.
    The Python callback must take one argument, an utterance (:class:`speect.SUtterance`),
    and must not return anything. The utterance can be modified in place.

    :param callback_function: A Python function that will be used as a callback
                              function when this utterance processor's ``run`` method
                              is called.
    :type callback_function: A callable function
    """


    return _s_uttproc_cb_new(callback_function)


# add the functions to the Speect SUttProcessor class
setattr(speect.SUttProcessor, "callback", staticmethod(callback))

# This file is compatible with both classic and new-style classes.


