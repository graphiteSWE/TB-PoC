# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""Speect Plug-in for SG2P class"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_g2p', [dirname(__file__)])
        except ImportError:
            import _g2p
            return _g2p
        if fp is not None:
            try:
                _mod = imp.load_module('_g2p', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _g2p = swig_import_helper()
    del swig_import_helper
else:
    import _g2p
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



__version__ = "1.0.0"
__license__= "mit"

import speect
class SG2P(_object):
    """

    An g2p (grapheme-to-phoneme) class.

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SG2P, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SG2P, name)
    __repr__ = _swig_repr
    __swig_setmethods__["features"] = _g2p.SG2P_features_set
    __swig_getmethods__["features"] = _g2p.SG2P_features_get
    if _newclass:
        features = _swig_property(_g2p.SG2P_features_get, _g2p.SG2P_features_set)

    def name(self):
        """

        name()

        Get the name of the g2p.

        :return: The g2p name.
        :rtype: string

        """
        return _g2p.SG2P_name(self)


    def description(self):
        """

        description()

        Get a description of the g2p.

        :return: The g2p description.
        :rtype: string

        """
        return _g2p.SG2P_description(self)


    def language(self):
        """

        language()

        Get the g2p language.

        :return: The g2p language.
        :rtype: string

        """
        return _g2p.SG2P_language(self)


    def lang_code(self):
        """

        lang_code()

        Get the g2p's ``ISO 639-2`` language code.

        :return: The ``ISO 639-2`` language code of the g2p.
        :rtype: string

        """
        return _g2p.SG2P_lang_code(self)


    def version(self):
        """

        version()

        Get the g2p's version.

        :return: The version of the g2p (major, minor).
        :rtype: tuple

        """
        return _g2p.SG2P_version(self)


    def apply_at(self, word, index):
        """

        apply_at(word, index)

        Apply the g2p to the grapheme at given index in the given word
        to get a phone. This method can be seen as a single step of
        the ``SG2P::apply`` method. It returns the phone of the grapheme at
        the index.


        :param word: The word to get a phone from at the given grapheme index.
        :type word: string
        :param index: The index of the grapheme, in the word, for which
        	          the phone is requested.
        :return: The phone of the grapheme at the index in the word.
        :rtype: string
        :note: Indexing starts at 0.
        :note: The returned phone can be ``None``, this is not necessarily an error.

        """
        return _g2p.SG2P_apply_at(self, word, index)


    def apply(self, word):
        """
        apply(word)

        Apply the g2p to the given word to get a phone list.

        :param word: The word to convert to a phone list.
        :type word: string
        :return: A list of phones for the given word or ``None`` if the
                     g2p failed. If the g2p failed a warning will be set in the
                     error log.
        :rtype: list
        """

        if not isinstance(word, unicode) and not isinstance(word, str):
            raise TypeError("Argument \"word\" must be a str or unicode type")

        return _g2p_apply(self, word)


    def __init__(self):
        """

        An g2p (grapheme-to-phoneme) class.

        """
        this = _g2p.new_SG2P()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _g2p.delete_SG2P
    __del__ = lambda self: None
SG2P_swigregister = _g2p.SG2P_swigregister
SG2P_swigregister(SG2P)


def _g2p_apply(arg1, word):
    """_g2p_apply(SG2P arg1, char const * word) -> PyObject *"""
    return _g2p._g2p_apply(arg1, word)
# This file is compatible with both classic and new-style classes.


