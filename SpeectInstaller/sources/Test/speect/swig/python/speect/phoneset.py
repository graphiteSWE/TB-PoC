# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""Speect Plug-in for SPhoneset class"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_phoneset', [dirname(__file__)])
        except ImportError:
            import _phoneset
            return _phoneset
        if fp is not None:
            try:
                _mod = imp.load_module('_phoneset', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _phoneset = swig_import_helper()
    del swig_import_helper
else:
    import _phoneset
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



__version__ = "1.0.0"
__license__= "mit"

import speect
class SPhoneset(_object):
    """

    An phoneset class, for accessing a defined phoneset.

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPhoneset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SPhoneset, name)
    __repr__ = _swig_repr
    __swig_setmethods__["features"] = _phoneset.SPhoneset_features_set
    __swig_getmethods__["features"] = _phoneset.SPhoneset_features_get
    if _newclass:
        features = _swig_property(_phoneset.SPhoneset_features_get, _phoneset.SPhoneset_features_set)

    def name(self):
        """

        name()

        Get the name of the phoneset.

        :return: The phoneset name.
        :rtype: string

        """
        return _phoneset.SPhoneset_name(self)


    def description(self):
        """

        description()

        Get a description of the phoneset.

        :return: The phoneset description.
        :rtype: string

        """
        return _phoneset.SPhoneset_description(self)


    def language(self):
        """

        language()

        Get the phoneset language.

        :return: The phoneset language.
        :rtype: string

        """
        return _phoneset.SPhoneset_language(self)


    def lang_code(self):
        """

        lang_code()

        Get the phoneset's ``ISO 639-2`` language code.

        :return: The ``ISO 639-2`` language code of the phoneset.
        :rtype: string

        """
        return _phoneset.SPhoneset_lang_code(self)


    def version(self):
        """

        version()

        Get the phoneset's version.

        :return: The version of the phoneset (major, minor).
        :rtype: tuple

        """
        return _phoneset.SPhoneset_version(self)


    def phone_has_feature(self, phone, feature):
        """

        phone_has_feature(phone, feature)

        Query if the phone in the phoneset has the named feature. The
        phones in the phoneset have binary features, i.e. a phone
        either has a specific named feature or it doesn't.

        :param phone: The phone for which the feature presence is queried.
        :type phone: string
        :param feature: The feature for which the query is done.
        :type feature: string
        :return: ``True`` if the feature is defined for the given phone, else ``False``.
                 If the given phone is not in the phoneset then ``False`` is returned.
        :rtype: bool

        """
        return _phoneset.SPhoneset_phone_has_feature(self, phone, feature)


    def has_phone(self, phone):
        """

        has_phone(phone)

        Query if the phone is present in the phoneset.

        :param phone: The phone for which the query is done.
        :type phone: string
        :return: ``True`` if the phone is defined in the phoneset , else ``False``.
        :rtype: bool

        """
        return _phoneset.SPhoneset_has_phone(self, phone)


    def get_phone_features(self, phone):
        """
        get_phone_features(phone)

        Get a list of the given phone's features.

        :param phone: The phone for which the feature list is requested.
        :type word: string
        :return: A list of named features which are the features of the
                 phones, or ``None`` if the phone is not in the phoneset.
        :rtype: list
        :note: The returned list *must* be considered constant in the C sence, and
               not modified in any way.
        """

        if phone == None:
            raise TypeError("Argument \"phone\" can not be 'None'")
        return _get_phone_features(self, phone)


    def get_phone_list(self):
        """
        get_phone_list()

        Get a list of phones defined in the phoneset.

        :return:  A list of named phones defined in the phoneset.
        :rtype: list
        """

        return _get_phone_list(self)


    def __init__(self):
        """

        An phoneset class, for accessing a defined phoneset.

        """
        this = _phoneset.new_SPhoneset()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _phoneset.delete_SPhoneset
    __del__ = lambda self: None
SPhoneset_swigregister = _phoneset.SPhoneset_swigregister
SPhoneset_swigregister(SPhoneset)


def _get_phone_features(arg1, phone):
    """_get_phone_features(SPhoneset arg1, char const * phone) -> PyObject *"""
    return _phoneset._get_phone_features(arg1, phone)

def _get_phone_list(arg1):
    """_get_phone_list(SPhoneset arg1) -> PyObject *"""
    return _phoneset._get_phone_list(arg1)
# This file is compatible with both classic and new-style classes.


