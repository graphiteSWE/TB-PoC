# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""Speect Plug-in for SJSONSyllabificationRewritesFile class"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_syllab_rewrites_json', [dirname(__file__)])
        except ImportError:
            import _syllab_rewrites_json
            return _syllab_rewrites_json
        if fp is not None:
            try:
                _mod = imp.load_module('_syllab_rewrites_json', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _syllab_rewrites_json = swig_import_helper()
    del swig_import_helper
else:
    import _syllab_rewrites_json
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



__version__ = "1.0.0"
__license__= "mit"

import speect

def _syllabification_rewrites_json_load(path):
    """_syllabification_rewrites_json_load(char const * path) -> SSyllabification *"""
    return _syllab_rewrites_json._syllabification_rewrites_json_load(path)

from . import syllabification

def load_syllabification_rewrites_json(path):
    """
    Load the JSON format syllabification rewrites rule-set at the given file path.

    :param path: The full path and filename of the JSON
                 format syllabification rewrites rule-set to load.
    :type path: string
    :return: The loaded syllabification at the given path.
    :rtype: ``SSyllabification``
    """
    if not isinstance(path, str):
        raise TypeError("Argument \"path\" must be a string")

    return _syllabification_rewrites_json_load(path)

setattr(syllabification.SSyllabification, "load_rewrites_json", staticmethod(load_syllabification_rewrites_json))

# This file is compatible with both classic and new-style classes.


