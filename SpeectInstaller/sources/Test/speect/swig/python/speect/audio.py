# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""Speect Plug-in for SAudio class"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_audio', [dirname(__file__)])
        except ImportError:
            import _audio
            return _audio
        if fp is not None:
            try:
                _mod = imp.load_module('_audio', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _audio = swig_import_helper()
    del swig_import_helper
else:
    import _audio
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



__version__ = "1.0.0"
__license__= "mit"

import speect

def saudio_samples(audio):
    """saudio_samples(SAudio audio)"""
    return _audio.saudio_samples(audio)
class SAudio(_object):
    """

    A container class for audio objects. Provides a Speect native class for
    creating/adding audio objects. The audio samples are internally represented as floats.

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SAudio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SAudio, name)
    __repr__ = _swig_repr

    def resize(self, new_size):
        """

        resize(new_size)

        Resize (number of samples) the audio object to the given size.

        :param new_size: The new size of the audio object (number of samples).
        :type new_size: int

        """
        return _audio.SAudio_resize(self, new_size)


    def scale(self, factor):
        """

        scale(factor)

        Scale the given audio object (samples) with the given factor.

        :param factor: The factor with which to scale the samples.
        :type factor: float

        """
        return _audio.SAudio_scale(self, factor)


    def num_samples(self):
        """

        num_samples()

        Return the number of samples of this audio object.

        :return: Number of samples of this audio object.
        :rtype: int

        """
        return _audio.SAudio_num_samples(self)


    def sample_rate(self):
        """

        sample_rate()

        Return the sample rate of the samples of this audio object.

        :return: Sample rate of this audio object (Hertz).
        :rtype: int

        """
        return _audio.SAudio_sample_rate(self)


    def get_audio_waveform(self):
        """
        Return the waveform of this SAudio object in Python dict  e.g.::

            {'sampletype': 'int16',
             'samplerate': 16000,
             'samples': '...bytestring...samples....'}

        :return: Audio waveform.
        :rtype: dict
        :note: Currently supports only 'int16' sample types.
        """

        sample_type = "int16"   # currently only option

        sample_rate = self.sample_rate()
        samples = saudio_samples(self)
        wave_dict = {
            "sampletype" : sample_type,
            "samplerate" : sample_rate,
            "samples" : samples
            }
        return wave_dict


    def play(self):
        """
        Play the audio waveform.
        First tries using pyaudio, else ossaudiodev on 'posix'
        or winsound on 'nt' systems.

        :note: On 'posix' systems, this function tries to
               open an audio device (environment variable ``AUDIODEV``,
               or fallback ``/dev/dsp``) and write 16 bit *little endian*
               values to it.
        """


    # first get audio waveform from audio object
        waveform = self.get_audio_waveform()

    # try using pyaudio
        try:
            import pyaudio
            chunk = 1024
            start = 0
            end = 1024

            p = pyaudio.PyAudio()

    # note: currently supports only 'int16' sample types (i.e. samplewidth = 2)
            samplewidth = 2

    # open stream
            stream = p.open(format =
                            p.get_format_from_width(samplewidth),
                            channels = 1,
                            rate = waveform["samplerate"],
                            output = True)

            num_samples = self.num_samples()
            while (end < num_samples):
                stream.write(waveform["samples"][start:end])
                start = end
                end = end + chunk

            stream.write(waveform["samples"][start:])
            stream.stop_stream()
            stream.close()
            p.terminate()

    # no pyaudio
        except ImportError:
            import os

            opsys = os.name

            if opsys not in ("posix", "nt"):
                raise EnvironmentError("SAudio.play() currently works only on" + \
                                           " \"posix\" and \"nt\" compatible systems")

            if opsys == "posix":
                import ossaudiodev

                dsp = ossaudiodev.open("w")
                dsp.setparameters(ossaudiodev.AFMT_S16_LE,
                                  1,
                                  waveform["samplerate"],
                                  True)
                dsp.writeall(waveform["samples"])
                dsp.close()

            else:     # nt (win)
                import winsound

                winsound.PlaySound(waveform["samples"], winsound.SND_MEMORY)



    def __init__(self):
        """

        A container class for audio objects. Provides a Speect native class for
        creating/adding audio objects. The audio samples are internally represented as floats.

        """
        this = _audio.new_SAudio()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _audio.delete_SAudio
    __del__ = lambda self: None
SAudio_swigregister = _audio.SAudio_swigregister
SAudio_swigregister(SAudio)


def _saudio_utt_play(self):
    """
    Play utterance waveform. Will do nothing
    if the utterance does not have an "audio"
    feature.

    :note: Uses SAudio.play() internally.
    """

    audio = self.features["audio"]
    if audio is None:
        return

    audio.play()


setattr(speect.SUtterance, "play", _saudio_utt_play)

# This file is compatible with both classic and new-style classes.


