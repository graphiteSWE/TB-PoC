# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""Speect Plug-in for SEbmlRead/SEbmlWrite class"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ebml', [dirname(__file__)])
        except ImportError:
            import _ebml
            return _ebml
        if fp is not None:
            try:
                _mod = imp.load_module('_ebml', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ebml = swig_import_helper()
    del swig_import_helper
else:
    import _ebml
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



__version__ = "1.0.0"
__license__= "mit"

import speect
class SEbmlWrite(_object):
    """

    SEbmlWrite(path [, doc_type = 'spct' [, doc_type_version = 1 [, doc_type_read_version = 1 [,
    	   ebml_version = 1 [, ebml_read_version = 1 [, max_id_width = 4 [,
    	   max_size_width = 4]]]]]]])

    EBML data writer class. Create an Ebml writer object with a path to the file
    to write to and EBML header information. The header will be written to file.
    The file is closed when the reader is deleted.

    :param path: Full path and file name of the file to write to.
    :type path: string
    :param doc_type: An ASCII string that identifies the type of the document.
    :type doc_type: string
    :param doc_type_version: The version of document type to which the document conforms to.
    :type doc_type_version: int
    :param doc_type_read_version: The minimum ``doc_type_version`` version an interpreter has to
           			      support in order to read the document.
    :type doc_type_read_version: int
    :param ebml_version: The version of EBML to which the document conforms to.
    :type ebml_version: int
    :param ebml_read_version: The minimum EBML version a parser has to support in order to read
           			  the document.
    :type ebml_read_version: int
    :param max_id_width: The maximum width of the ``IDs`` used in this document.
    :type max_id_width: int
    :param max_size_width: The maximum width of the size descriptors used in this document.
    :type max_size_width: int

    :return: EBML data writer object.
    :rtype: SEbmlWrite

    :note: Speect does not support ``max_id_width`` or ``max_size_width`` greater than 4.

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEbmlWrite, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SEbmlWrite, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        SEbmlWrite(path [, doc_type = 'spct' [, doc_type_version = 1 [, doc_type_read_version = 1 [,
        	   ebml_version = 1 [, ebml_read_version = 1 [, max_id_width = 4 [,
        	   max_size_width = 4]]]]]]])

        EBML data writer class. Create an Ebml writer object with a path to the file
        to write to and EBML header information. The header will be written to file.
        The file is closed when the reader is deleted.

        :param path: Full path and file name of the file to write to.
        :type path: string
        :param doc_type: An ASCII string that identifies the type of the document.
        :type doc_type: string
        :param doc_type_version: The version of document type to which the document conforms to.
        :type doc_type_version: int
        :param doc_type_read_version: The minimum ``doc_type_version`` version an interpreter has to
               			      support in order to read the document.
        :type doc_type_read_version: int
        :param ebml_version: The version of EBML to which the document conforms to.
        :type ebml_version: int
        :param ebml_read_version: The minimum EBML version a parser has to support in order to read
               			  the document.
        :type ebml_read_version: int
        :param max_id_width: The maximum width of the ``IDs`` used in this document.
        :type max_id_width: int
        :param max_size_width: The maximum width of the size descriptors used in this document.
        :type max_size_width: int

        :return: EBML data writer object.
        :rtype: SEbmlWrite

        :note: Speect does not support ``max_id_width`` or ``max_size_width`` greater than 4.

        """
        this = _ebml.new_SEbmlWrite(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ebml.delete_SEbmlWrite
    __del__ = lambda self: None

    def write_uint(self, val, id):
        """

        write_uint(val, id)

        Write an unsigned integer to the EBML data source.

        :param val: The unsigned integer to write.
        :type val: int
        :param id: The ID of the unsigned integer element.
        :type id: int

        """
        return _ebml.SEbmlWrite_write_uint(self, val, id)


    def write_sint(self, val, id):
        """

        write_sint(val, id)

        Write an signed integer to the EBML data source.

        :param val: The signed integer to write.
        :type val: int
        :param id: The ID of the signed integer element.
        :type id: int

        """
        return _ebml.SEbmlWrite_write_sint(self, val, id)


    def write_double(self, val, id):
        """

        write_double(val, id)

        Write a double value to the EBML data source.

        :param val: The double value to write.
        :type val: float
        :param id: The ID of the double element.
        :type id: int

        """
        return _ebml.SEbmlWrite_write_double(self, val, id)


    def write_str(self, val, id):
        """

        write_string(val, id)

        Write a string to the EBML data source.

        :param val: The string to write.
        :type val: string
        :param id: The ID of the string.
        :type id: int

        """
        return _ebml.SEbmlWrite_write_str(self, val, id)


    def start_container(self, id):
        """

        start_container(id)

        Start a container element with the given id.

        :param id: The ID of the container.
        :type id: int

        """
        return _ebml.SEbmlWrite_start_container(self, id)


    def end_container(self):
        """

        end_container(id)

        End (close) a previously started a container element.

        """
        return _ebml.SEbmlWrite_end_container(self)


    def write_object(self, val, id):
        """

        write_object(val, id)

        Write an object to the EBML data source.

        :param val: The object to write.
        :type val: SObject
        :param id: The ID of the object.
        :type id: int

        :note: The object must have an appropriate *serialization formatter*
               defined and registered for the ``spct_ebml`` format. If not,
               then the object can not be written.

        """
        return _ebml.SEbmlWrite_write_object(self, val, id)

SEbmlWrite_swigregister = _ebml.SEbmlWrite_swigregister
SEbmlWrite_swigregister(SEbmlWrite)

class SEbmlRead(_object):
    """

    SEbmlRead(path)


    EBML data reader class. Create an Ebml reader object with a path to an EBML format file
    from which to read. The header of the file is read on successful opening of the file.
    The file is closed when the reader is deleted.

    :param path: Full path and file name of the file to read from.
    :type path: string

    :return: EBML data reader object.
    :rtype: SEbmlRead

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEbmlRead, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SEbmlRead, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ebml_version"] = _ebml.SEbmlRead_ebml_version_get
    if _newclass:
        ebml_version = _swig_property(_ebml.SEbmlRead_ebml_version_get)
    __swig_getmethods__["reader_version"] = _ebml.SEbmlRead_reader_version_get
    if _newclass:
        reader_version = _swig_property(_ebml.SEbmlRead_reader_version_get)
    __swig_getmethods__["max_id_width"] = _ebml.SEbmlRead_max_id_width_get
    if _newclass:
        max_id_width = _swig_property(_ebml.SEbmlRead_max_id_width_get)
    __swig_getmethods__["max_size_width"] = _ebml.SEbmlRead_max_size_width_get
    if _newclass:
        max_size_width = _swig_property(_ebml.SEbmlRead_max_size_width_get)
    __swig_getmethods__["doc_type_version"] = _ebml.SEbmlRead_doc_type_version_get
    if _newclass:
        doc_type_version = _swig_property(_ebml.SEbmlRead_doc_type_version_get)
    __swig_getmethods__["doc_type_reader_version"] = _ebml.SEbmlRead_doc_type_reader_version_get
    if _newclass:
        doc_type_reader_version = _swig_property(_ebml.SEbmlRead_doc_type_reader_version_get)

    def __init__(self, path):
        """

        SEbmlRead(path)


        EBML data reader class. Create an Ebml reader object with a path to an EBML format file
        from which to read. The header of the file is read on successful opening of the file.
        The file is closed when the reader is deleted.

        :param path: Full path and file name of the file to read from.
        :type path: string

        :return: EBML data reader object.
        :rtype: SEbmlRead

        """
        this = _ebml.new_SEbmlRead(path)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ebml.delete_SEbmlRead
    __del__ = lambda self: None

    def doc_type(self):
        """

        doctype()

        Get the document type of the file.
        An ASCII string that identifies the type of the document.

        :return: document type.
        :rtype: string

        """
        return _ebml.SEbmlRead_doc_type(self)


    def peek_id(self):
        """

        peek_id()

        Peek the ``ID`` of the next element in the ebml data source.


        :return: Ebml ID.
        :rtype: int

        """
        return _ebml.SEbmlRead_peek_id(self)


    def skip_element(self):
        """

        skip_element()

        Skip the current ebml element.

        """
        return _ebml.SEbmlRead_skip_element(self)


    def open_container(self):
        """

        open_container()

        Open a container element and return it's ``ID``.

        :return: ID
        :rtype: int

        """
        return _ebml.SEbmlRead_open_container(self)


    def container_exhausted(self):
        """

        container_exhausted()

        Query if all of a currently open container's elements have been read.
        Thus, if true then the container is 'exhausted'.

        :return: True of False.
        :rtype: bool

        """
        return _ebml.SEbmlRead_container_exhausted(self)


    def read_uint(self):
        """

        read_uint()

        Read current element as an unsigned integer.

        :return: [ID, element]
        :rtype: tuple

        """
        return _ebml.SEbmlRead_read_uint(self)


    def read_sint(self):
        """

        read_sint()

        Read current element as a signed integer.

        :return: [ID, element]
        :rtype: tuple

        """
        return _ebml.SEbmlRead_read_sint(self)


    def read_double(self):
        """

        read_double()

        Read current element as a double.

        :return: [ID, element]
        :rtype: tuple

        """
        return _ebml.SEbmlRead_read_double(self)


    def read_str(self):
        """

        read_str()

        Read current element as a str.

        :return: [ID, element]
        :rtype: tuple

        """
        return _ebml.SEbmlRead_read_str(self)


    def read_object(self):
        """

        read_object()

        Read current element as an object.

        :return: [ID, element]
        :rtype: tuple
        :note: The object must have an appropriate *serialization formatter*
               defined and registered for the ``spct_ebml`` format. If not,
               then the object can not be read.

        """
        return _ebml.SEbmlRead_read_object(self)

SEbmlRead_swigregister = _ebml.SEbmlRead_swigregister
SEbmlRead_swigregister(SEbmlRead)

# This file is compatible with both classic and new-style classes.


