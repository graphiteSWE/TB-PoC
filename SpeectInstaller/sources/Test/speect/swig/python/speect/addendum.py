# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""Speect Plug-in for SAddendum class"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_addendum', [dirname(__file__)])
        except ImportError:
            import _addendum
            return _addendum
        if fp is not None:
            try:
                _mod = imp.load_module('_addendum', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _addendum = swig_import_helper()
    del swig_import_helper
else:
    import _addendum
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



__version__ = "1.0.0"
__license__= "mit"

import speect
class SAddendum(_object):
    """

    An addendum class, for accessing a defined addendum.

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SAddendum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SAddendum, name)
    __repr__ = _swig_repr
    __swig_setmethods__["features"] = _addendum.SAddendum_features_set
    __swig_getmethods__["features"] = _addendum.SAddendum_features_get
    if _newclass:
        features = _swig_property(_addendum.SAddendum_features_get, _addendum.SAddendum_features_set)

    def name(self):
        """

        name()

        Get the name of the addendum.

        :return: The addendum name.
        :rtype: string

        """
        return _addendum.SAddendum_name(self)


    def description(self):
        """

        description()

        Get a description of the addendum.

        :return: The addendum description.
        :rtype: string

        """
        return _addendum.SAddendum_description(self)


    def language(self):
        """

        language()

        Get the addendum language.

        :return: The addendum language.
        :rtype: string

        """
        return _addendum.SAddendum_language(self)


    def lang_code(self):
        """

        lang_code()

        Get the addendum's ``ISO 639-2`` language code.

        :return: The ``ISO 639-2`` language code of the addendum.
        :rtype: string

        """
        return _addendum.SAddendum_lang_code(self)


    def version(self):
        """

        version()

        Get the addendum's version.

        :return: The version of the addendum (major, minor).
        :rtype: tuple

        """
        return _addendum.SAddendum_version(self)


    def add_word(self, word, features):
        """

        add_word(word, features)

        Add a word to the addendum.

        :param word: The word to add.
        :type word: string
        :param features: Specific features of the word. Features are used to distinguish
                         homographs (i.e. part-of-speech). At least a "phones" or a "syllables"
                         feature must exists in the given ``features`` dictionary.
        :type features: dictionary
        :note: The addendum takes hold a the ``features`` object.
        :note: The added entry is not saved in the addendum file (not persistent).

        """
        return _addendum.SAddendum_add_word(self, word, features)


    def get_word(self, word, features=None):
        """
        get_word(word, features)

        Get a word from the addendum.

        :param word: The word to get.
        :type word: string
        :param features: Specific features which might distinguish the word if multiple
                         entries of the word exists in the addendum. If ``None`` then the
                         first entry of the word is returned.
        :type features: dict
        :return: The return value is dependent on the word definition in the addendum, and can be:

                     * A list of phones for the given word (no syllables were defined in the addendum).
                     * A list of syllables, where the syllables are lists of phones.
                     * ``None`` if word was not found in the addendum.

                 As well as a ``bool`` value, specifying if the returned list is phones or syllables.
                 If ``True`` then syllables were returned, else if ``False`` a list of phones were
                 returned.

                 For example::

                     list, syllabified = myaddendum.get_word(\"hello\", None)

        :rtype: list, bool
        """

        if not isinstance(word, unicode) and not isinstance(word, str):
            raise TypeError("Argument \"word\" must be a str or unicode type")

        if features is not None and not isinstance(features, dict):
            raise TypeError("Argument \"features\" must be a dict type")

        tmp_tuple = _addendum_get_word(self, word, features)
        if tmp_tuple is not None:
            wlist = tmp_tuple[0]
            syllabified = tmp_tuple[1]
        else:
            wlist = None
            syllabified = False

        return wlist, syllabified


    def __init__(self):
        """

        An addendum class, for accessing a defined addendum.

        """
        this = _addendum.new_SAddendum()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _addendum.delete_SAddendum
    __del__ = lambda self: None
SAddendum_swigregister = _addendum.SAddendum_swigregister
SAddendum_swigregister(SAddendum)


def _addendum_get_word(arg1, word, features):
    """_addendum_get_word(SAddendum arg1, char const * word, PyObject * features) -> PyObject *"""
    return _addendum._addendum_get_word(arg1, word, features)
# This file is compatible with both classic and new-style classes.


